{{for|the Universal Telegraphic Phrase-book|Commercial code}}
{{SpecialChars}}

[[Image:Unicodeconsortium bookv5.jpg|thumb|right|The Unicode Standard, Version 5.0]]
{{Table Unicode}}'''Unicode''' is a [[computing]] [[industry standard]] allowing [[computer]]s to represent and manipulate [[Character (computing)|text]] expressed in most of the world's [[writing system]]s consistently. Developed in tandem with the [[Universal Character Set]] standard and published in book form as ''The Unicode Standard'', the latest version of Unicode consists of a repertoire of more than 107,000 [[character (computing)|characters]] covering 90 scripts, a set of code charts for visual reference, an encoding methodology and set of standard [[character encoding]]s, an enumeration of character properties such as upper and lower [[letter case|case]], a set of reference data [[computer file]]s, and a number of related items, such as character properties, rules for [[Unicode normalization|normalization]], decomposition, [[collation]], rendering, and [[Bi-directional text|bidirectional]] display order (for the correct display of text containing both right-to-left scripts, such as [[Arabic language|Arabic]] or [[Hebrew language|Hebrew]], and left-to-right scripts).<ref>[http://www.unicode.org/standard/principles.html#What_Characters Technical Introduction<!-- Bot generated title -->]</ref>

The [[Unicode Consortium]], the nonprofit organization that coordinates Unicode's development, has the ambitious goal of eventually replacing existing character encoding schemes with Unicode and its standard Unicode Transformation Format (UTF) schemes, as many of the existing schemes are limited in size and scope and are incompatible with [[multilingualism|multilingual]] environments.

Unicode's success at unifying character sets has led to its widespread and predominant use in the [[internationalization and localization]] of [[computer software]]. The standard has been implemented in many recent technologies, including [[XML]], the [[Java (programming language)|Java programming language]], the [[.NET framework|Microsoft .NET Framework]], and modern [[operating system]]s.

Unicode can be implemented by different [[character encoding]]s.  The most commonly used encodings<!-- shouldn't this be, encodes, rather than encodings --> are [[UTF-8]] (which uses 1 [[byte]] for all [[ASCII]] characters, which have the same code values as in the standard ASCII encoding, and up to 4 bytes for other characters), the now-obsolete [[UCS-2]] (which uses 2 bytes for all characters, but does not include every character in the Unicode standard), and [[UTF-16]] (which extends UCS-2, using 4 bytes to encode characters missing from UCS-2).

==Origin and development==

Unicode has the explicit aim of transcending the limitations of traditional [[character encoding]]s, such as those defined by the [[ISO 8859]] standard, which find wide usage in various countries of the world, but remain largely incompatible with each other. Many traditional character encodings share a common problem in that they allow bilingual computer processing (usually using [[Latin character]]s and the local script), but not multilingual computer processing (computer processing of arbitrary scripts mixed with each other).

Unicode, in intent, encodes the underlying [[character (computing)|character]]s&nbsp;— [[grapheme]]s and grapheme-like units&nbsp;— rather than the variant [[glyph]]s (renderings) for such characters. In the case of [[Chinese character]]s, this sometimes leads to controversies over distinguishing the underlying character from its variant glyphs (see [[Han unification]]).

In text processing, Unicode takes the role of providing a unique ''code point''&nbsp;— a number, not a glyph&nbsp;— for each character. In other words, Unicode represents a character in an abstract way and leaves the visual rendering (size, shape, [[font]], or style) to other software, such as a [[web browser]] or [[word processor]]. This simple aim becomes complicated, however, because of concessions made by Unicode's designers in the hope of encouraging a more rapid adoption of Unicode.

The first 256 code points were made identical to the content of [[ISO 8859-1]] so as to make it trivial to convert existing western text. Many essentially-identical characters were encoded multiple times at different code points to preserve distinctions used by legacy encodings and therefore, allow conversion from those encodings to Unicode (and back) without losing any information. For example, the "[[fullwidth form]]s" section of code points encompasses a full Latin alphabet that is separate from the main Latin alphabet section. In Chinese, Japanese, and Korean ([[CJK]]) fonts, these characters are rendered at the same width as CJK [[ideograph]]s, rather than at half the width. For other examples, see [[Duplicate characters in Unicode]].

===History===

The origins of Unicode date back to 1987, when [[Joe Becker (Unicode)|Joe Becker]] from [[Xerox]] and Lee Collins and [[Mark Davis (Unicode)|Mark Davis]] from [[Apple Inc.|Apple]] started investigating the practicalities of creating a universal character set.<ref>[http://www.unicode.org/history/summary.html Summary Narrative of the History of Unicode]</ref> In August 1988, Joe Becker published a draft proposal for an "international/multilingual text character encoding system, tentatively called Unicode." In this document, entitled [http://www.unicode.org/history/unicode88.pdf Unicode 88], he outlined a 16 bit character model:

<blockquote>
Unicode is intended to address the need for a workable, reliable world text encoding. Unicode could be roughly described as "wide-body ASCII" that has been stretched to 16 bits to encompass the characters of all the world's living languages. In a properly engineered design, 16 bits per character are more than sufficient for this purpose.
</blockquote>

His original 16 bit design was based on the assumption that only those scripts and characters in modern use would need to be encoded:

<blockquote>
Unicode gives higher priority to ensuring utility for the future than to preserving past antiquities. Unicode aims in the first instance at the characters published in modern text (e.g. in the union of all newspapers and magazines printed in the world in 1988), whose number is undoubtedly far below 2<sup>14</sup> = 16,384. Beyond those modern-use characters, all others may be defined to be obsolete or rare; these are better candidates for private-use registration than for congesting the public list of generally-useful Unicodes.
</blockquote>

In early 1989, the Unicode working group expanded to include Ken Whistler and Mike Kernaghan of Metaphor, Karen Smith-Yoshimura and Joan Aliprand of [[Research Libraries Group|RLG]], and Glenn Wright of [[Sun Microsystems]], and in 1990 Michel Suignard and Asmus Freytag from [[Microsoft]] and Rick McGowan of [[NeXT]] joined the group. By the end of 1990, most of the work on mapping existing character encoding standards had been completed, and a final review draft of Unicode was ready. The Unicode consortium was incorporated on January 3, 1991, in the state of California, and in October 1991, the first volume of the Unicode standard was published. The second volume, covering Han ideographs, was published in June 1992.

In 1996, a surrogate character mechanism was implemented in Unicode 2.0, so that Unicode was no longer restricted to 16 bits. This increased the Unicode codespace to over a million code points, which allowed for the encoding of many historical scripts (e.g. [[Egyptian hieroglyph|Egyptian Hieroglyphs]]) and thousands of rarely-used or obsolete characters that had not been anticipated as needing encoding.

===Architecture and terminology===

<!-- Template:U+ links to this paragraph --><p id="Upluslink">Unicode defines a [[codespace]] of 1,114,112 [[code points]] in the range 0<sub>hex</sub> to 10FFFF<sub>hex</sub>.<ref>[http://unicode.org/glossary/ Glossary of Unicode Terms]</ref> Normally a Unicode code point is referred to by writing "U+" followed by its hexadecimal number. For code points in the [[Basic Multilingual Plane]] (BMP), four digits are used (e.g. U+0058 for the character LATIN CAPITAL LETTER X); for code points outside the BMP, five or six digits are used, as required (e.g. U+E0001 for the character LANGUAGE TAG and U+10FFFD for the character PRIVATE USE CHARACTER-10FFFD). Older versions of the standard used similar notations, but with slightly different rules. For example, Unicode 3.0 used "U-" followed by eight digits, and allowed "U+" to be used only with exactly four digits to indicate a code unit, not a code point.

The Unicode codespace is divided into seventeen [[Mapping of Unicode character planes|planes]], each comprising 65,536 code points or 256 rows of 256 code points:

{| class="wikitable"
! Plane !! Range !! Description !! Abbreviation
|-
| 0 ||0000–FFFF ||'''Basic Multilingual Plane''' ||BMP
|-
| 1 ||10000–1FFFF ||'''Supplementary Multilingual Plane''' ||SMP
|-
| 2 ||20000–2FFFF ||'''Supplementary Ideographic Plane''' ||SIP
|-
| 3 ||30000-3FFFF || Tentatively designated as the '''Tertiary Ideographic Plane''' (TIP), but no characters have been assigned to it yet.<ref>http://www.unicode.org/roadmaps/tip/</ref> || TIP
|-
| 4 to 13 ||40000–DFFFF ||currently unassigned ||
|-
| 14 ||E0000–EFFFF ||'''Supplementary Special-purpose Plane''' ||SSP
|-
| 15 ||F0000–FFFFF ||'''Supplementary Private Use Area-A'''||
|-
| 16 ||100000–10FFFF ||'''Supplementary Private Use Area-B'''||
|}

All code points in the BMP are accessed as a single code unit in [[UTF-16]] encoding, whereas the code points in Planes 1 through 16 ('''supplementary planes''', or, informally, '''astral planes''') are accessed as surrogate pairs in [[UTF-16]].

Within each plane, characters are allocated in named '''blocks''' of related characters. Although blocks are an arbitrary size, they always are a multiple of 16 code points, and often, a multiple of 128 code points. Characters required for a given script may be spread out over several different blocks.

The following categories of code points are defined:

* Surrogate code points
* Noncharacters
* Reserved characters
* Private use characters
* Graphic characters
* Format characters
* Control code characters

Code points in the range U+D800..U+DBFF (1,024 code points) are known as high-surrogate code points, and code points in the range U+DC00..U+DFFF (1,024 code points) are known as low-surrogate code points. A high-surrogate code point (also known as a leading surrogate) followed by a low-surrogate code point (also known as a trailing surrogate) together form a surrogate pair that represents a code point outside the [[Basic Multilingual Plane]] in the [[UTF-16]] encoding form. High and low surrogate code points are not valid by themselves, and are only valid as surrogate pairs in UTF-16 encoded texts. Thus the range of code points that are available for use as characters is U+0000..U+D7FF and U+E000..U+10FFFF (1,112,064 code points). The hexadecimal value of these code points (i.e. excluding surrogates) sometimes is referred to as the character's scalar value.

Noncharacters are code points that are guaranteed never to be used for encoding characters, although applications may make use of these code points internally if they wish. There are sixty-six noncharacters: U+FDD0..U+FDEF and any code point ending in the value FFFE or FFFF (i.e. U+FFFE, U+FFFF, U+1FFFE, U+1FFFF, ... U+10FFFE, U+10FFFF). The set of noncharacters is stable, and no new noncharacters will ever be defined.<ref>[http://unicode.org/policies/stability_policy.html Unicode Stability Policy]</ref>

Reserved code points are those code points which are available for use as encoded characters, but are not yet defined as characters by Unicode.

Private-use code points are considered to be assigned characters, but they have no interpretation specified by the Unicode standard<ref>http://www.unicode.org/versions/Unicode5.0.0/ch03.pdf#G43463</ref> so any interchange of such characters requires an agreement between sender and receiver on their interpretation. There are three private-use areas in the Unicode codespace:

* Private Use Area: U+E000..U+F8FF (6,400 characters)
* Supplementary Private Use Area-A: U+F0000..U+FFFFD (65,534 characters)
* Supplementary Private Use Area-B: U+100000..U+10FFFD (65,534 characters)

Graphic characters are characters defined by Unicode to have a particular semantic, and either have a visible [[glyph]] shape or represent a visible space. As of Unicode 5.2 there are 107,154 graphic characters.

Format characters are characters that do not have a visible appearance, but may have an effect on the appearance or behavior of neighboring characters. For example, U+200C [[Zero-width non-joiner|ZERO WIDTH NON-JOINER]] and U+200D [[Zero-width joiner|ZERO WIDTH JOINER]] may be used to change the default shaping behavior of adjacent characters (e.g. to inhibit ligatures or request ligature formation). There are 142 format characters in Unicode 5.2.

Sixty-five code points (U+0000..U+001F and U+007F.. U+009F) are reserved as control codes, and correspond to the C0 and C1 control codes defined in ISO/IEC 6429. Of these U+0009 (Tab), U+000A (Line Feed), and U+000D (Carriage Return) are widely used in Unicode-encoded texts.

Graphic characters, format characters, control code characters, and private use characters are known collectively as '''assigned characters'''.

The set of graphic and format characters defined by Unicode does not correspond directly to the repertoire of '''abstract characters''' that is representable under Unicode. Unicode encodes characters by associating an abstract character with a particular code point.<ref>[http://unicode.org/reports/tr17/ Character Encoding Model]</ref> Not all abstract characters are encoded as a single Unicode character, however, and some abstract characters may be represented in Unicode by a sequence of two or more characters. For example, a Latin small letter "i" with an [[ogonek]], a [[dot above]], and an [[acute accent]], which is required in Lithuanian, is represented by the character sequence U+012F, U+0307, U+0301. Unicode maintains a list of uniquely named character sequences for abstract characters that are not directly encoded in Unicode.<ref>[http://unicode.org/Public/UNIDATA/NamedSequences.txt Unicode Named Sequences]</ref>

All graphic, format, and private use characters have a unique and immutable name by which they may be identified. Although a Unicode character name may not be changed under any circumstances (historically this was not the case), in cases where the name is seriously defective and misleading, or has a serious typographical error, a formal alias may be defined, and applications are encouraged to use the formal alias in place of the official character name. For example, U+A015 YI SYLLABLE WU has the formal alias YI SYLLABLE ITERATION MARK, and U+FE18 PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET<!-- "BRAKCET" really is what the character is called, please do not miscorrect to "BRACKET" !!! --> has the formal alias PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRACKET.<ref>[http://unicode.org/Public/UNIDATA/NameAliases.txt Unicode Name Aliases]</ref>

===Standard===

The [[Unicode Consortium]], based in [[California]], develops the Unicode standard. There are various levels of membership, and any company or individual willing to pay the membership dues may join this organization. Full members include most of the main computer software and hardware companies with any interest in text-processing standards, including [[Adobe Systems]], [[Apple Inc.|Apple]], [[Google]], [[International Business Machines|IBM]], [[Microsoft]], [[Oracle Corporation]], [[Sun Microsystems]], and [[Yahoo]].<ref>[http://www.unicode.org/consortium/memblogo.html The Unicode Consortium Members]</ref>

The Consortium first published ''The Unicode Standard'' (ISBN 0-321-18578-1) in 1991, and continues to develop standards based on that original work. The latest major version of the standard, Unicode 5.0 (ISBN 0-321-48091-0), was published in 2007. The data files for the most recent minor version, Unicode 5.2, are available from the consortium's web site.

Unicode is developed in conjunction with the [[International Organization for Standardization]] and shares the character repertoire with [[ISO/IEC 10646]]: the Universal Character Set. Unicode and ISO/IEC 10646 function equivalently as character encodings, but ''The Unicode Standard'' contains much more information for implementers, covering&nbsp;— in depth&nbsp;— topics such as bitwise encoding, [[Unicode collation algorithm|collation]] and rendering. The Unicode Standard enumerates a multitude of character properties, including those needed for supporting [[Bi-directional text|bidirectional text]]. The two standards do use slightly different terminology.

Thus far the following major and minor versions of the Unicode standard have been published (update versions, which do not include any changes to character repertoire, are omitted).<ref>[http://www.unicode.org/versions/enumeratedversions.html Enumerated Versions of The Unicode Standard]</ref>

{| class="wikitable"
|-
!rowspan=2| Version
!rowspan=2| Date
!rowspan=2| Book
!rowspan=2| Corresponding [[Universal Character Set|ISO/IEC 10646]] Edition
!rowspan=2| [[Unicode scripts|Scripts]]
!colspan=2| Characters
|-
! #
! Notable additions
|-
| 1.0.0
| October 1991
| ISBN 0-201-56788-1 (Vol.1)
| 
| 24
| 7,161
| Initial repertoire covers these scripts: [[Arabic alphabet|Arabic]], [[Armenian alphabet|Armenian]], [[Bengali script|Bengali]], [[Zhuyin|Bopomofo]], [[Cyrillic alphabet|Cyrillic]], [[Devanagari script|Devanagari]], [[Georgian alphabet|Georgian]], [[Greek alphabet|Greek and Coptic]], [[Gujarati script|Gujarati]], [[Gurmukhi script|Gurmukhi]], [[Hangul]], [[Hebrew alphabet|Hebrew]], [[Hiragana]], [[Kannada script|Kannada]], [[Katakana]], [[Lao script|Lao]], [[Latin alphabet|Latin]], [[Malayalam script|Malayalam]], [[Oriya script|Oriya]], [[Tamil script|Tamil]], [[Telugu script|Telugu]], [[Thai alphabet|Thai]], and [[Tibetan script|Tibetan]].<ref>http://www.unicode.org/Public/reconstructed/1.0.0/UnicodeData.txt</ref>
|-
| 1.0.1
| June 1992
| ISBN 0-201-60845-6 (Vol.2)
| 
| 25
| 28,359
| The initial set of 20,902 [[CJK Unified Ideographs]] is defined.<ref>http://www.unicode.org/Public/reconstructed/1.0.1/UnicodeData.txt</ref>
|-
| 1.1
| June 1993
| 
| ISO/IEC 10646-1:1993
| 24
| 34,233
| 4,306 more [[Hangul]] syllables added to original set of 2,350 characters. [[Tibetan script|Tibetan]] removed.<ref>http://www.unicode.org/Public/1.1-Update/UnicodeData-1.1.5.txt</ref>
|-
| 2.0
| July 1996
| ISBN 0-201-48345-9
| ISO/IEC 10646-1:1993 plus Amendments 5, 6 and 7
| 25
| 38,950
| Original set of [[Hangul]] syllables removed, and a new set of 11,172 Hangul syllables added at a new location.<ref>[http://www.unicode.org/Public/2.0-Update/UnicodeData-2.0.14.txt The Unicode 2.0 data file] shows the 11,172 new syllables in the range AC00-D7A3. There are still 445 charcters with "Hangul" in the name listed.</ref>[[Tibetan script|Tibetan]] added back in a new location and with a different character repertoire. Surrogate character mechanism defined, and Plane 15 and Plane 16 [[Mapping of Unicode characters#Private use characters|Private Use Areas]] allocated.<ref>http://www.unicode.org/Public/2.0-Update/UnicodeData-2.0.14.txt</ref>
|-
| 2.1
| May 1998
| 
| ISO/IEC 10646-1:1993 plus Amendments 5, 6 and 7, and two characters from Amendment 18
| 25
| 38,952
| [[Euro sign]] added.<ref>http://www.unicode.org/Public/2.1-Update/UnicodeData-2.1.2.txt</ref>
|-
| 3.0
| September 1999
| ISBN 0-201-61633-5
| ISO/IEC 10646-1:2000
| 38
| 49,259
| [[Cherokee syllabary|Cherokee]], [[Ge'ez alphabet|Ethiopic]], [[Khmer script|Khmer]], [[Mongolian script|Mongolian]], [[Burmese script|Myanmar]], [[Ogham]], [[Runic alphabet|Runic]], [[Sinhala script|Sinhala]], [[Syriac alphabet|Syriac]], [[Tāna|Thaana]], [[Canadian Aboriginal syllabics|Unified Canadian Aboriginal Syllabics]], and [[Yi script|Yi Syllables]] added, as well as a set of [[Braille]] patterns.<ref>http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt</ref>
|-
| 3.1
| March 2001
| 
| ISO/IEC 10646-1:2000
ISO/IEC 10646-2:2001
| 41
| 94,205
| [[Deseret alphabet|Deseret]], [[Gothic alphabet|Gothic]] and [[Old Italic alphabet|Old Italic]] added, as well as sets of symbols for [[Modern musical symbols|Western music]] and [[Byzantine music]], and 42,711 additional [[CJK Unified Ideographs]].<ref>http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt</ref>
|-
| 3.2
| March 2002
| 
| ISO/IEC 10646-1:2000 plus Amendment 1
ISO/IEC 10646-2:2001
| 45
| 95,221
| [[Philippines|Philippine]] scripts [[Buhid script|Buhid]], [[Hanunó'o script|Hanunó'o]], [[Baybayin|Tagalog]], and [[Tagbanwa script|Tagbanwa]] added.<ref>http://www.unicode.org/Public/3.2-Update/UnicodeData-3.2.0.txt</ref>
|-
| 4.0
| April 2003
| ISBN 0-321-18578-1
| ISO/IEC 10646:2003
| 52
| 96,447
| [[Cypriot syllabary]], [[Limbu script|Limbu]], [[Linear B]], [[Osmanya script|Osmanya]], [[Shavian alphabet|Shavian]], [[Tai Nüa language#Writing_system|Tai Le]], and [[Ugaritic alphabet|Ugaritic]] added, as well as [[Hexagram (I Ching)|Hexagram symbols]].<ref>http://www.unicode.org/Public/4.0-Update/UnicodeData-4.0.0.txt</ref>
|-
| 4.1
| March 2005
| 
| ISO/IEC 10646:2003 plus Amendment 1
| 59
| 97,720
| [[Lontara script|Buginese]], [[Glagolitic alphabet|Glagolitic]], [[Kharoṣṭhī|Kharoshthi]], [[New Tai Lue]], [[Old Persian cuneiform script|Old Persian]], [[Sylheti Nagari|Syloti Nagri]], and [[Tifinagh]] added, and [[Coptic alphabet|Coptic]] was disunified from [[Greek alphabet|Greek]]. Ancient Greek numbers and musical symbols were also added.<ref>http://www.unicode.org/Public/4.1.0/ucd/UnicodeData.txt</ref>
|-
| 5.0
| July 2006
| ISBN 0-321-48091-0
| ISO/IEC 10646:2003 plus Amendments 1 and 2, and four characters from Amendment 3
| 64
| 99,089
| [[Balinese script|Balinese]], [[Cuneiform script|Cuneiform]], [[N'Ko]], [[Phags-pa script|Phags-pa]], and [[Phoenician alphabet|Phoenician]] added.<ref>http://www.unicode.org/Public/5.0.0/ucd/UnicodeData.txt</ref>
|-
| 5.1
| April 2008
| 
| ISO/IEC 10646:2003 plus Amendments 1, 2, 3 and 4
| 75
| 100,713
| [[Carian script|Carian]], [[Cham alphabet|Cham]], [[Kayah Li script|Kayah Li]], [[Lepcha script|Lepcha]], [[Lycian script|Lycian]], [[Lydian script|Lydian]], [[Ol Chiki script|Ol Chiki]], [[Rejang script|Rejang]], [[Saurashtra script|Saurashtra]], [[Sundanese script|Sundanese]], and [[Vai syllabary|Vai]] added, as well as sets of symbols for the [[Phaistos Disc]], [[Mahjong|Mahjong tiles]], and [[Dominoes|Domino tiles]]. There were also important additions for [[Burmese script|Myanmar]], additions of letters and [[Scribal abbreviation]]s used in medieval [[manuscript]]s, and the addition of [[capital ß]].<ref>http://www.unicode.org/Public/5.1.0/ucd/UnicodeData.txt</ref>
|-
| 5.2
| October 2009
| 
| ISO/IEC 10646:2003 plus Amendments 1, 2, 3, 4, 5 and 6
| 90
| 107,361
| [[Avestan alphabet|Avestan]], [[Bamum language|Bamum]], [[Egyptian hieroglyphs]] (the [[Gardiner's sign list|Gardiner Set]], comprising 1,071 characters), [[Aramaic language#Imperial Aramaic|Imperial Aramaic]], [[Pahlavi scripts#Inscriptional Pahlavi|Inscriptional Pahlavi]], [[Parthian language#Written Parthian|Inscriptional Parthian]], [[Javanese script|Javanese]], [[Kaithi]], [[Fraser alphabet|Lisu]], [[Meitei Mayek script|Meetei Mayek]], [[South Arabian alphabet|Old South Arabian]], [[Old Turkic script|Old Turkic]], [[Samaritan script|Samaritan]], [[Tai Tham script|Tai Tham]] and [[Tai Viet script|Tai Viet]] added. 4,149 additional [[CJK Unified Ideographs]] (CJK-C), as well as extended Jamo for [[Hangul|Old Hangul]], and characters for [[Vedic Sanskrit]].<ref>http://www.unicode.org/Public/5.2.0/ucd/UnicodeData.txt</ref>
|}

Unicode 6.0, corresponding to ISO/IEC 10646:2003 plus Amendments 1 through 8, is scheduled for release in late 2010.<ref>[http://std.dkuug.dk/JTC1/SC2/WG2/docs/n3714.pdf Unicode Liaison Report to WG2 (2008-10-26)]</ref>

===Scripts covered===
[[Image:Unicode sample.png|thumb|right|200px|Many modern applications can render a substantial subset of the myriad [[Unicode scripts]], as demonstrated by this [[screenshot]] from the [[OpenOffice.org]] application]]<!-- screenshot fair use rationale: this screenshot is used specifically to illustrate the Unicode-related capabilities of modern desktop applications and the breadth of supported Unicode scripts -->
Unicode covers almost all scripts ([[writing system]]s) in current use today.<ref>[http://www.unicode.org/charts/ Code Charts - Scripts<!-- Bot generated title -->]</ref>

Although 90 [[Unicode scripts|scripts]] (covering [[alphabet]]s, [[abugida]]s and [[Syllabary|syllabaries]]) are included in the latest version of Unicode, more remain awaiting encoding, particularly some used in historical, liturgical, and academic contexts. Further additions of characters to the already-encoded scripts, as well as symbols, in particular for [[mathematics]] and [[musical notation|music]] (in the form of notes and rhythmic symbols), also occur. The Unicode Roadmap Committee ([[Michael Everson]], Rick McGowan, and Ken Whistler) maintain the list of scripts that are candidates or potential candidates for encoding and their tentative code block assignments on the [http://www.unicode.org/roadmaps/ Unicode Roadmap] page of the [[Unicode Consortium]] Web site. For some scripts on the Roadmap, such as [[Jurchen script|Jurchen]], [[Nü Shu]], and [[Tangut script|Tangut]], encoding proposals have been made and they are working their way through the approval process. For others scripts, such as [[Maya hieroglyphics|Mayan]], [[Rongorongo]], and [[Linear A]], no proposal has yet been made, and they await agreement on character repertoire and other details from the user communities involved.

Some modern invented scripts which have not yet been included in Unicode (e.g., [[Tengwar]]) or which do not qualify for inclusion in Unicode due to lack of real-world use (e.g., [[Klingon writing systems|Klingon]]) are listed in the [[ConScript Unicode Registry]], along with unofficial but widely-used [[Private Use Area]] code assignments.

==Mapping and encodings==
{{see also|Mapping of Unicode characters}}

Several mechanisms have been specified for implementing Unicode; which one implementers choose depends on available storage space, [[source code]] compatibility, and interoperability with other systems.

===Unicode Transformation Format and Universal Character Set===
Unicode defines two mapping methods: the ''[[UTF-8|Unicode Transformation Format]]'' (UTF) encodings, and the ''[[Universal Character Set]]'' (UCS) encodings. An encoding maps (possibly a subset of) the range of Unicode ''code points'' to sequences of values in some fixed-size range, termed ''code values''. The numbers in the names of the encodings indicate the number of bits in one code value (for UTF encodings) or the number of bytes per code value (for UCS) encodings. UTF-8 and UTF-16 probably are the most commonly used encodings. UCS-2 is an obsolete subset of UTF-16; UCS-4 and UTF-32 are functionally equivalent.

UTF encodings include:
* [[UTF-1]]&nbsp;— a retired predecessor of UTF-8, maximizes compatibility with [[ISO/IEC 2022|ISO 2022]], no longer part of ''The Unicode Standard''
* [[UTF-7]]&nbsp;— a relatively unpopular 7-bit encoding, often considered obsolete (not part of ''The Unicode Standard'' but rather an RFC)
* [[UTF-8]]&nbsp;— an 8-bit, variable-width encoding, which maximizes compatibility with [[ASCII]].
* [[UTF-EBCDIC]]&nbsp;— an 8-bit variable-width encoding, which maximizes compatibility with [[EBCDIC]]. (not part of ''The Unicode Standard'')
* [[UTF-16]]&nbsp;— a 16-bit, variable-width encoding
* [[UTF-32]]&nbsp;— a 32-bit, fixed-width encoding

UTF-8 uses one to four bytes per code point and, being compact for Latin scripts and ASCII-compatible, provides the ''de facto'' standard encoding for interchange of Unicode text. It also is used by most recent [[Linux distributions]] as a direct replacement for legacy encodings in general text handling.

The UCS-2 and UTF-16 encodings specify the Unicode [[Byte Order Mark]] (BOM) for use at the beginnings of text files, which may be used for byte ordering detection (or [[endianness|byte endianness]] detection). Some software developers have adopted it for other encodings, including UTF-8, which does not need an indication of byte order. In this case it attempts to mark the file as containing Unicode text. The BOM, code point U+FEFF has the important property of unambiguity on byte reorder, regardless of the Unicode encoding used; U+FFFE (the result of byte-swapping U+FEFF) does not equate to a legal character, and U+FEFF in other places, other than the beginning of text, conveys the zero-width no-break space (a character with no appearance and no effect other than preventing the formation of [[ligature (typography)|ligature]]s). Also, the units <code>FE</code> and <code>FF</code> never appear in [[UTF-8]]. The same character converted to UTF-8 becomes the byte sequence <code>EF BB BF</code>.

In UTF-32 and UCS-4, one 32-bit code value serves as a fairly direct representation of any character's code point (although the endianness, which varies across different platforms, affects how the code value manifests as an octet sequence). In the other cases, each code point may be represented by a variable number of code values. UTF-32 is widely used as internal representation of text in programs (as opposed to stored or transmitted text), since every Unix operating system which uses the [[GNU Compiler Collection|gcc]] compilers to generate software uses it as the standard "wide character" encoding. Recent versions of the [[Python (programming language)|Python]] programming language (beginning with 2.2) also may be configured to use UTF-32 as the representation for unicode strings, effectively disseminating such encoding in [[high-level programming language|high-level]] coded software.

[[Punycode]], another encoding form, enables the encoding of Unicode strings into the limited character set supported by the [[ASCII]]-based [[Domain Name System]]. The encoding is used as part of [[IDNA]], which is a system enabling the use of [[Internationalized Domain Names]] in all scripts that are supported by Unicode. Earlier and now historical proposals include [[Comparison of Unicode encodings#Historical:_UTF-5_and_UTF-6|UTF-5 and UTF-6]].

[[GB18030]] is another encoding form for Unicode, from the [[Standardization Administration of China]]. It is the official [[character set]] of the [[People's Republic of China]] (PRC). [[Binary Ordered Compression for Unicode|BOCU-1]] and [[Standard Compression Scheme for Unicode|SCSU]] are Unicode compression schemes. The [[April Fools' Day RFC]] of 2005 specified two [[parody]] UTF encodings, [[UTF-9 and UTF-18]].

===Ready-made versus composite characters===

Unicode includes a mechanism for modifying character shape that greatly extends the supported glyph repertoire. This covers the use of [[combining diacritical mark]]s. They are inserted after the main character (one can stack several combining diacritics over the same character). Unicode also contains [[precomposed character|precomposed]] versions of most letter/diacritic combinations in normal use. These make conversion to and from legacy encodings simpler, and allow applications to use Unicode as an internal text format without having to implement combining characters. For example ''é'' can be represented in Unicode as {{U+|0065}} (Latin small letter e) followed by U+0301 (combining acute), but it also can be represented as the precomposed character U+00E9 (Latin small<!-- meant to mean ? "lower case" --> letter e with acute). So in many cases, users have many ways of encoding the same character. To deal with this, Unicode provides the mechanism of [[canonical equivalence]].

An example of this arises with [[hangul]], the Korean alphabet. Unicode provides the mechanism for composing hangul syllables with their individual subcomponents, known as [[hangul Jamo]]m however, it also provides all 11,172 combinations of precomposed hangul syllables.

The [[CJK]] ideographs currently have codes only for their precomposed form. Still, most of those ideographs comprise simpler elements (often called radicals in English), so in principle, Unicode could have decomposed them just as has happened with [[hangul]]. This would have reduced the number of required code points greatly, while allowing the display of virtually every conceivable ideograph (which might do away with some of the problems caused by the [[Han unification]]). A similar idea covers some [[input method]]s, such as [[Cangjie method|Cangjie]] and [[Wubi method|Wubi]], however, attempts to do this for character encoding have stumbled over the fact that ideographs do not decompose so simply or so regularly as it seems they should.

A set of [[Radical (Chinese character)|radicals]] was provided in Unicode 3.0 (CJK radicals between U+2E80 and U+2EFF, KangXi radicals in U+2F00 to U+2FDF, and ideographic description characters from U+2FF0 to U+2FFB), but the Unicode standard (ch. 11.1 of Unicode 4.1) warns against using ideographic description sequences as an alternate representation for previously encoded characters:

{{quote|This process is different from a formal encoding of an ideograph. There is no canonical description of unencoded ideographs; there is no semantic assigned to described ideographs; there is no equivalence defined for described ideographs. Conceptually, ideograph descriptions are more akin to the English phrase, “an ‘e’ with an acute accent on it,” than to the character sequence &lt;U+006E, U+0301&gt; ''[sic; 'e' should be U+0065]''.}}

===Ligatures===

Many scripts, including [[Arabic script|Arabic]] and [[Devanāgarī|Devanagari]], have special orthographic rules that require certain combinations of letterforms to be combined into special [[ligature (typography)|ligature forms]]. The rules governing ligature formation can be quite complex, requiring special script-shaping technologies such as ACE (Arabic Calligraphic Engine by DecoType in the 1980s and used to generate all the Arabic examples in the printed editions of the Unicode Standard), which became the proof of concept for [[OpenType]] (by Adobe and Microsoft), [[Graphite (SIL)|Graphite]] (by [[SIL International]]), or [[Apple Advanced Typography|AAT]] (by Apple). [[Font language|Instructions]] also are embedded in fonts to tell the [[operating system]] how to output different character sequences properly. A simple solution to the placement of combining marks or diacritics is assigning the marks a width of zero and placing the glyph itself to the left or right of the left [[sidebearing]] (depending on the direction of the script they are intended to be used with).  A mark handled this way will appear over whatever character precedes it, but will not adjust its position relative to the width or height of the base glyph; it may be awkward visually and it may overlap some glyphs.  Real stacking is impossible, but can be approximated in limited cases (for example, Thai top-combining vowels and tone marks can just be at different heights to start with).  Generally this approach is effective only in monospaced fonts, but also may be used as a fallback rendering method when more complex methods fail.

===Standardized subsets===

Several subsets of Unicode are standardized: Microsoft Windows since Windows NT 4.0 supports [[WGL-4]] with 652 characters, which is considered to support all contemporary European languages using the Latin, Greek, or Cyrillic script. Other standardized subsets of Unicode include the Multilingual European Subsets:<ref>[http://www.evertype.com/standards/iso10646/pdf/cwa13873.pdf CWA 13873:2000&nbsp;– Multilingual European Subsets in ISO/IEC 10646-1] [[European Committee for Standardization|CEN]] Workshop Agreement 13873</ref>
MES-1 (Latin scripts only, 335 characters), MES-2 (Latin, Greek and Cyrillic 1062 characters)<ref>[http://www.cl.cam.ac.uk/~mgk25/ucs/mes-2-rationale.html Multilingual European Character Set 2 (MES-2) Rationale], [[Markus Kuhn]], 1998</ref> and MES-3A & MES-3B (two larger subsets, not shown here). Note that MES-2 includes every character in MES-1 and WGL-4.

{| class="wikitable" style="font-family: monospace;"
|colspan="3" align="center"| '''WGL-4''', ''MES-1'' and MES-2
|-style="font-family:serif;"|
! Row !! Cells !! Range(s)
|-
!rowspan="2"| 00
| '''''20–7E'''''
| [[Latin characters in Unicode|Basic Latin]] (00–7F)
|-
| '''''A0–FF'''''
| [[Latin characters in Unicode|Latin-1 Supplement]] (80–FF)
|-
!rowspan="2"| 01
| '''''00–13,'' 14–15, ''16–2B,'' 2C–2D, ''2E–4D,'' 4E–4F, ''50–7E,'' 7F'''
| Latin Extended-A (00–7F)
|-
| 8F, '''92,''' B7, DE-EF, '''FA–FF'''
| Latin Extended-B (80–FF <span title="U+024F">...</span>)
|-
!rowspan="3"| 02
| 18–1B, 1E–1F
| Latin Extended-B (<span title="U+00180">...</span> 00–4F)
|-
| 59, 7C, 92
| IPA Extensions (50–AF)
|-
| BB–BD, '''C6, ''C7,'' C9,''' D6, '''''D8–DB,'' DC, ''DD,''''' DF, EE
| Spacing Modifier Letters (B0–FF)
|-
! 03
| 74–75,  7A,  7E, '''84–8A, 8C, 8E–A1, A3–CE,''' D7, DA–E1
| Greek (70–FF)
|-
! 04
| 00, '''01–0C,''' 0D, '''0E–4F,''' 50, '''51–5C,''' 5D, '''5E–5F, 90–91,''' 92–C4, C7–C8, CB–CC, D0–EB, EE–F5, F8–F9
| Cyrillic (00–FF)
|-
! 1E
| 02–03, 0A–0B, 1E–1F, 40–41, 56–57, 60–61, 6A–6B, '''80–85,''' 9B, '''F2–F3'''
| Latin Extended Additional (00–FF)
|-
! 1F
| 00–15, 18–1D, 20–45, 48–4D, 50–57, 59, 5B, 5D, 5F–7D, 80–B4, B6–C4, C6–D3, D6–DB, DD–EF, F2–F4, F6–FE
| Greek Extended (00–FF)
|-
!rowspan="3"| 20
| '''13–14, ''15,'' 17, ''18–19,'' 1A–1B, ''1C–1D,'' 1E, 20–22, 26, 30, 32–33, 39–3A, 3C, 3E'''
| General Punctuation (00–6F)
|-
| '''44,''' 4A, '''7F''', 82
| [[Superscript]]s and [[Subscript]]s (70–9F)
|-
| '''A3–A4, A7, ''AC,''''' AF
| [[Currency Symbol]]s (A0–CF)
|-
!rowspan="3"| 21
| '''05, 13, 16, ''22, 26,'' 2E'''
| [[Letterlike Symbols]] (00–4F)
|-
| '''''5B–5E'''''
| [[Number Forms]] (50–8F)
|-
| '''''90–93,'' 94–95, A8'''
| [[Arrow (symbol)|Arrows]] (90–FF)
|-
! 22
| 00, '''02,''' 03, '''06,''' 08-09, '''0F, 11–12, 15, 19–1A, 1E–1F,''' 27-28, '''29,''' 2A, '''2B, 48,''' 59, '''60–61, 64–65,''' 82–83, 95, 97
| [[Unicode Mathematical Operators|Mathematical Operators]] (00–FF)
|-
! 23
| '''02, 0A, 20–21,''' 29–2A
| [[Miscellaneous Technical (Unicode)|Miscellaneous Technical]] (00–FF)
|-
!rowspan="3"| 25
| '''00, 02, 0C, 10, 14, 18, 1C, 24, 2C, 34, 3C, 50–6C'''
| [[Box drawing characters|Box Drawing]] (00–7F)
|-
| '''80, 84, 88, 8C, 90–93'''
| Block Elements (80–9F)
|-
| '''A0–A1, AA–AC, B2, BA, BC, C4, CA–CB, CF, D8–D9, E6'''
| Geometric Shapes (A0–FF)
|-
! 26
| '''3A–3C, 40, 42, 60, 63, 65–66, ''6A,'' 6B'''
| [[Miscellaneous Symbols]] (00–FF)
|-
! F0
| (01–02)<!--in WGL-4, but not in MES-2-->
| Private Use Area (00–FF ...)
|-
! FB
| '''01–02'''
| Alphabetic Presentation Forms (00–4F)
|-
! FF
| FD
| Specials
|}

Rendering software which can not process a Unicode character appropriately most often displays it only as an open rectangle, or the Unicode “[[replacement character]]” (U+FFFD, {{Unicode|�}}), to indicate the position of the unrecognized character. Some systems have made attempts to provide more information about such characters. The Apple ''[[LastResort]]'' font will display a substitute glyph indicating the Unicode range of the character, and the [[SIL International|SIL]] [[Unicode fallback font]] will display a box showing the hexadecimal scalar value of the character.

==Unicode in use==
===Operating systems===

Unicode has become the dominant scheme for internal processing and storage of text (although a great deal of text remains stored in legacy encodings, Unicode is used almost exclusively for building new information processing systems). Early adopters tended to use UCS-2 and later moved to UTF-16 (as this was the least disruptive way to add support for non-BMP characters). The best known such system is [[Windows NT]] (and its descendants, [[Windows 2000]], [[Windows XP]], and [[Windows Vista]]), which uses UTF-16 as the sole internal character encoding. The [[Java virtual machine|Java]] and [[.NET Framework|.NET]] bytecode environments, [[Mac OS X]], and [[KDE]] also use it for internal representation. Unicode is available on [[Windows 95]] (and its descendants, [[Windows 98]] and [[Windows ME]]) through [[Microsoft Layer for Unicode]].

[[UTF-8]] (originally developed for [[Plan 9 from Bell Labs|Plan 9]]) has become the main storage encoding on most [[Unix-like]] operating systems (though others are also used by some libraries) because it is a relatively easy replacement for traditional [[extended ASCII]] character sets.

Multilingual text-rendering engines which use Unicode include [[Uniscribe]] for Microsoft Windows, [[ATSUI]] and [[Core Text]] for Mac OS X, and [[Pango]] for [[GTK+]] and the [[GNOME]] desktop.

===Input methods===
{{main|Unicode input}}
Because keyboard layouts cannot have simple key combinations for all characters, several operating systems provide alternative input methods that allow access to the entire repertoire.

[[ISO 14755]]<ref>[http://www.cl.cam.ac.uk/~mgk25/volatile/ISO-14755.pdf ISO/IEC JTC1/SC 18/WG 9 N]</ref>, which standardises methods for entering Unicode characters from their codepoints, specifies several methods. There is the ''Basic method'', where a ''beginning sequence'' is followed by the hexadecimal representation of the codepoint and the ''ending sequence''. There also is a ''screen-selection entry method'' specified, where the characters are listed in a table in a screen, such as with a character map program.

===E-mail===
{{main|Unicode and e-mail}}

[[MIME]] defines two different mechanisms for encoding non-ASCII characters in [[e-mail]], depending on whether the characters are in e-mail headers such as the "Subject:" or in the text body of the message. In both cases, the original character set is identified as well as a transfer encoding. For e-mail transmission of Unicode the [[UTF-8]] character set and the [[Base64]] or the [[Quoted-printable]] transfer encoding are recommended, depending on whether much of the message consists of [[ASCII]]-characters. The details of the two different mechanisms are specified in the MIME standards and generally are hidden from users of e-mail software.

The adoption of Unicode in [[e-mail]] has been very slow. Some East-Asian text is still encoded in encodings such as [[ISO-2022]], and some devices, such as cell telephones, still cannot handle Unicode data correctly. Support has been improving however. Many major free mail providers such as [[Yahoo]], [[Google]] ([[gmail]]), and [[Microsoft]] ([[Hotmail]]) support it.

===Web===
{{main|Unicode and HTML}}

All [[W3C]] recommendations have used Unicode as their ''document character set'' since HTML 4.0. [[Web browser]]s have supported Unicode, especially UTF-8, for many years. Display problems result primarily from [[typeface|font]] related issues; in particular, versions of Microsoft [[Internet Explorer]] do not render many code points unless explicitly told to use a font that contains them.<ref>[http://www.alanwood.net/unicode/explorer.html#ie5 Setting up Windows Internet Explorer 5, 5.5 and 6 for Multilingual and Unicode Support]</ref>

Although syntax rules may affect the order in which characters are allowed to appear, both [[HTML|HTML 4]] and [[XML]] (including [[XHTML]]) documents, by definition, comprise characters from most of the Unicode code points, with the exception of:
* most of the [[C0 and C1 control codes]]
* the permanently-unassigned code points D800–DFFF
* any code point ending in FFFE or FFFF

These characters manifest either directly as [[byte]]s according to document's encoding, if the encoding supports them, or users may write them as numeric character references based on the character's Unicode code point. For example, the references <code>&amp;#916;</code>, <code>&amp;#1049;</code>, <code>&amp;#1511;</code>, <code>&amp;#1605;</code>, <code>&amp;#3671;</code>, <code>&amp;#12354;</code>, <code>&amp;#21494;</code>, <code>&amp;#33865;</code>, and <code>&amp;#47568;</code> (or the same numeric values expressed in hexadecimal, with <code>&amp;#x</code> as the prefix) should display on all browsers as Δ, Й, ק, ‎ م, ๗, あ, 叶, 葉, and 말.

When specifying [[Uniform Resource Identifier|URI]]s, for example as [[Uniform Resource Locator|URLs]] in [[HTTP]] requests, non-ASCII characters must be [[percent encoding|percent-encoded]].

===Fonts===
{{main|Unicode typefaces}}

Free and retail [[font]]s based on Unicode commonly are available, since [[TrueType]] and [[OpenType]] support Unicode. These font formats map Unicode code points to glyphs.

[[List of typefaces|Thousands of fonts]] exist on the market, but fewer than a dozen fonts&nbsp;— sometimes described as "pan-Unicode" fonts&nbsp;— attempt to support the majority of Unicode's character repertoire. Instead, Unicode-based [[List of typefaces#Unicode fonts|fonts]] typically focus on supporting only basic ASCII and particular scripts or sets of characters or symbols. Several reasons justify this approach: applications and documents rarely need to render characters from more than one or two writing systems; fonts tend to demand resources in computing environments; and operating systems and applications show increasing intelligence in regard to obtaining glyph information from separate font files as needed, i.e. [[font substitution]]. Furthermore, designing a consistent set of rendering instructions for tens of thousands of glyphs constitutes a monumental task; such a venture passes the point of [[diminishing returns]] for most typefaces.

===New lines===

Unicode partially addresses the new line problem that occurs when trying to read a text file on different platforms.  Unicode defines a large number of [[Newline#Unicode|characters]] that conforming applications should recognize as line terminators.

In terms of the new line, Unicode did introduce U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR. This was an attempt to provide a Unicode solution to encoding paragraphs and lines semantically, however, potentially replacing all of the various platform solutions. So in doing so, Unicode does provide a way around the historical platform dependent solutions. Nonetheless, few if any Unicode solutions have adopted these Unicode line and paragraph separators as the sole canonical line ending characters, however, a common approach to solving this issue is through new line normalization. This is achieved with the Cocoa text system in Mac OS X and also with W3C XML and HTML recommendations. In this approach every possible new line character is converted internally to a common new line (which one doesn't really matter since it's an internal operation just for rendering). So in other words, regardless of how the line ending is encoded in the text, the text system can treat it as a new line.

==Issues==
===Philosophical and completeness criticisms===

[[Han unification]] (the identification of forms in the three [[East Asian language]]s which one can treat as stylistic variations of the same historical character) has become one of the most controversial aspects of Unicode, despite the presence of a majority of experts from all three regions in the [[Ideographic Rapporteur Group]] (IRG), which advises the Consortium and ISO on additions to the repertoire and on Han unification.<ref> [http://tronweb.super-nova.co.jp/characcodehist.html A Brief History of Character Codes], Steven J. Searle, originally written [http://web.archive.org/web/20001216022100/http://tronweb.super-nova.co.jp/characcodehist.html  1999], last updated 2004</ref>

Unicode has been criticized for failing to allow for older and alternative forms of [[kanji]] which, critics argue, complicates the processing of ancient Japanese and uncommon Japanese names, although it follows the recommendations of Japanese language scholars and of the Japanese government and, contains all of the same characters as previous, widely-used encoding standards.<ref name="dw2001"> [http://www-128.ibm.com/developerworks/library/u-secret.html The secret life of Unicode: A peek at Unicode's soft underbelly], Suzanne Topping, [[1 May]] [[2001]]</ref> There have been several attempts to create alternative encodings that preserve the minor, stylistic differences among Chinese, Japanese, and Korean characters in opposition to Unicode's policy of Han unification. Among them are [[TRON (encoding)|TRON]] (although it is not widely adopted in Japan, there are some users who need to handle historical Japanese text and favor it), and [[UTF-2000]].

Although the repertoire of fewer than 21,000 Han characters in the earliest version of Unicode was largely limited to characters in common modern usage, Unicode now includes more than 70,000 Han characters, and work is continuing to add thousands more historic and dialectal characters used in China, Japan, Korea, and Vietnam.

===Mapping to legacy character sets===

[[Injective]] mappings must be provided between characters in existing legacy character sets and characters in Unicode to facilitate conversion to Unicode and allow interoperability with legacy software. Lack of consistency in various mappings between earlier Japanese encodings such as [[Shift-JIS]] or [[EUC-JP]] and Unicode led to [[round-trip format conversion]] mismatches, particularly the mapping of the character JIS X 201 '～' (1-33, WAVE DASH), heavily used in legacy database data, to either '～' U+FF5E FULLWIDTH TILDE (in [[Microsoft Windows]]) or '〜' U+301C WAVE DASH (other vendors).<ref>
[http://std.dkuug.dk/jtc1/sc2/wg2/docs/n2166.doc AFII contribution about WAVE DASH],
[http://www.ingrid.org/java/i18n/unicode.html Unicode vendor-specific character table for Japanese]</ref>

Some Japanese computer programmers objected to Unicode because it requires them to separate the use of '' U+005C REVERSE SOLIDUS (backslash) and '¥' U+00A5 YEN SIGN, which was mapped to 0x5C in JIS X 0201, and a lot of legacy code exists with this usage.<ref> [http://www.debian.org/doc/manuals/intro-i18n/ch-codes.en.html#s-646problem ''ISO 646-* Problem''], Section 4.4.3.5 of ''Introduction to I18n'', Tomohiro KUBOTA, 2001</ref> (This encoding also replaces tilde '~' 0x7E with overline '¯', now 0xAF.) The separation of these characters exists in ISO 8859-1, from long before Unicode.

===Indic scripts===

[[Thai alphabet]] support has been criticized for its illogical ordering of Thai characters. The vowels เ, แ, โ, ใ, ไ that are written to the left of the preceding consonant are in visual order instead of phonetic order, unlike the Unicode representations of other Indic scripts. This complication is due to Unicode inheriting the [[TIS-620|Thai Industrial Standard 620]], which worked in the same way. This ordering problem complicates the Unicode collation process slightly, requiring table lookups to reorder Thai characters for collation.<ref name="dw2001" />

[[Indic script]]s such as [[Tamil script|Tamil]] and [[Devanagari]] are each allocated only 128 code points, matching the [[ISCII]] standard. The correct rendering of Unicode Indic text requires transforming the stored logical order characters into visual order and the forming of ligatures out of components. Some local scholars argued in favor of assignments of Unicode codepoints to these ligatures, going against the practice for other writing systems, though Unicode contains some Arabic and other ligatures for backward compatibility purposes only.<ref>http://www.unicode.org/charts/PDF/UFB50.pdf</ref><ref>http://www.unicode.org/charts/PDF/UFE70.pdf</ref><ref>http://www.unicode.org/charts/PDF/UFB00.pdf</ref> Encoding of any new ligatures in Unicode will not happen, in part because the set of ligatures is font-dependent, and Unicode is an encoding independent of font variations. The same kind of issue arose for [[Tibetan script]] (the Chinese National Standard organization failed to achieve a similar change).

===Combining characters===

Characters with diacritical marks generally can be represented either as a single precomposed character or as a decomposed sequence of a base letter plus one or more non-spacing marks. For example, {{unicode|ḗ}} (precomposed e with macron and acute above) and {{unicode|&#275;&#769;}} (e followed by the combining macron above and combining acute above) should be rendered identically, both appearing as an [[e]] with a [[macron]] and [[acute accent]], but in practice, their appearance may vary depending upon what rendering engine and fonts are being used to display the characters. Similarly, [[dot (diacritic)|underdot]]s, as needed in the [[romanization]] of [[Indo-Aryan languages|Indic]], will often be placed incorrectly. Unicode characters that map to precomposed glyphs can be used in many cases, thus avoiding the problem, but where no precomposed character has been encoded the problem often can be solved by using a specialist Unicode font such as [[Charis SIL]] that uses [[Graphite (SIL)|Graphite]], [[OpenType]], or [[Apple Advanced Typography|AAT]] technologies for advanced rendering features.

==See also==

* [[Comparison of Unicode encodings]]
* [[Free software Unicode typefaces]]
* [[List of binary codes]]
* [[List of Unicode characters#See also|List of Unicode characters, organized by code point]]
* [[List of Unicode characters|List of Unicode characters, organized by script]]
* [[List of XML and HTML character entity references]]
* [[Unicode symbols]]

==Notes==

{{reflist|2}}

==References==

{{refbegin}}
* ''The Complete Manual of Typography'', James Felici, Adobe Press; 1st edition, 2002. ISBN 0-321-12730-7
* ''The Unicode Standard, Version 4.0'', The Unicode Consortium, Addison-Wesley Professional, [[27 August]] [[2003]]. ISBN 0-321-18578-1
* ''The Unicode Standard, Version 5.0, Fifth Edition'', The [[Unicode Consortium]], Addison-Wesley Professional, [[27 October]] [[2006]]. ISBN 0-321-48091-0
* ''Unicode: A Primer'', Tony Graham, M&amp;T books, 2000. ISBN 0-7645-4625-2.
* ''Unicode Demystified: A Practical Programmer's Guide to the Encoding Standard'', Richard Gillam, Addison-Wesley Professional; 1st edition, 2002. ISBN 0-201-70052-2
* ''Unicode Explained'', Jukka K. Korpela, O'Reilly; 1st edition, 2006. ISBN 0-596-10121-X
{{refend}}

==External links==
{{sisterlinks}}
* [http://www.unicode.org The Unicode Consortium]
** [http://www.unicode.org/versions/Unicode5.2.0/ Unicode 5.2.0], including the Unicode 5.0 book in PDF format
** [http://www.unicode.org/charts/ Character Code Charts By Script] for Unicode 5.2
* [http://www.alanwood.net/unicode/ Alan Wood's Unicode Resources] Contains lists of word processors with Unicode capability; fonts and characters are grouped by type; characters are presented in lists, not grids.
* Tim Bray's [http://www.tbray.org/ongoing/When/200x/2003/04/26/UTF Characters vs Bytes] explains how the different encodings work.
* [http://www.decodeunicode.org/ decodeunicode.org] images of all 98,884 graphic characters defined in Unicode 5.0 (German/English, full text search)
* [http://libunicode-plus.wiki.sourceforge.net/ libUniCode-plus] Wiki (creation and manipulation of Unicode tables)
* [http://unicode.coeurlumiere.com/ Table of Unicode characters from 1 to 65535] (alternative tables: [http://ivanov.in/upbar/symbols8.php 64 symbols per page] and [http://ivanov.in/upbar/symbols.php 100 symbols per page])
* [http://www.fileformat.info/info/unicode/char/search.htm Unicode Character Search] (search for characters by their unicode names)
* [http://people.w3.org/rishida/scripts/uniview/descn UniView] An XHTML-based Unicode character look up application
* [http://www.yoix.org/unicode.html YChartUnicode] [[Yoix]] chart of all Code Points in the Basic Multilingual Plane
* Bill Poser's [http://www.billposer.org/Linguistics/Computation/LectureNotes/Unicode.html Unicode] linguistic explanation and a list of [http://billposer.org/Software/ListOfRepresentations.html Escape Formats]

{{character encoding}}

[[Category:Character sets]]
[[Category:Unicode| ]]
[[Category:Typography]]

{{link FA|ru}}

[[als:Unicode]]
[[ar:يونيكود]]
[[az:Unicode]]
[[bn:ইউনিকোড]]
[[zh-min-nan:Thong-iōng-bé]]
[[bs:Unikod]]
[[br:Unicode]]
[[bg:Уникод]]
[[ca:Unicode]]
[[cs:Unicode]]
[[da:Unicode]]
[[de:Unicode]]
[[et:Unicode]]
[[el:Unicode]]
[[es:Unicode]]
[[eo:Unikodo]]
[[eu:Unicode]]
[[fa:یونی‌کد]]
[[fr:Unicode]]
[[ga:Unicode]]
[[gl:Unicode]]
[[ko:유니코드]]
[[hi:यूनिकोड]]
[[hr:Unicode]]
[[id:Unicode]]
[[ia:Unicode]]
[[is:Unicode]]
[[it:Unicode]]
[[he:יוניקוד]]
[[jv:Unicode]]
[[kn:ಯುನಿಕೋಡ್]]
[[ka:უნიკოდი]]
[[ks:यूनिकोड]]
[[ky:Юникод]]
[[ku:Unicode]]
[[lv:Unikods]]
[[lt:Unikodas]]
[[hu:Unicode]]
[[ml:യൂണികോഡ്]]
[[ms:Unicode]]
[[nl:Unicode]]
[[ne:युनिकोड]]
[[new:युनिकोड]]
[[ja:Unicode]]
[[no:Unicode]]
[[nn:Unicode]]
[[nds:Unicode]]
[[pl:Unicode]]
[[pt:Unicode]]
[[ro:Unicode]]
[[ru:Юникод]]
[[sah:Юникод]]
[[sq:Unicode]]
[[simple:Unicode]]
[[sk:Unicode]]
[[sl:Unicode]]
[[ckb:یونیکۆد]]
[[sr:Unikod]]
[[sh:Unikod]]
[[fi:Unicode]]
[[sv:Unicode]]
[[ta:ஒருங்குறி]]
[[th:ยูนิโคด]]
[[tg:Юникод]]
[[chr:Unicode/Cherokee]]
[[tr:Unicode]]
[[uk:Юнікод]]
[[ur:یکرمزی]]
[[vi:Unicode]]
[[wa:Unicôde]]
[[yo:Unicode]]
[[zh-yue:統一碼]]
[[zh:Unicode]]